import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder

TOKEN = "–¢–û–ö–ï–ù_–ë–û–¢–ê"  # üîπ –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ç–æ–∫–µ–Ω, –≤—ã–¥–∞–Ω–Ω—ã–π BotFather

bot = Bot(token=TOKEN)
dp = Dispatcher()


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(F.text == "/start")
async def start(message: types.Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", callback_data="choose_channel")
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±–∞–≤—å –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª (—Å –ø—Ä–∞–≤–æ–º —É–¥–∞–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π), "
        "–∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –∏ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
        reply_markup=kb.as_markup()
    )


# === –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ ===
@dp.callback_query(F.data == "choose_channel")
async def choose_channel(callback: types.CallbackQuery):
    channels = []
    async for dialog in bot.get_dialogs():
        if dialog.chat.type in ["channel", "supergroup"]:
            try:
                member = await bot.get_chat_member(dialog.chat.id, bot.id)
                if member.status in ["administrator", "creator"]:
                    channels.append(dialog.chat)
            except Exception:
                continue

    if not channels:
        await callback.message.edit_text(
            "‚ùå –Ø –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∏ –≤ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ.\n\n–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–æ–º *–£–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤* –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
            parse_mode="Markdown"
        )
        return

    kb = InlineKeyboardBuilder()
    for ch in channels:
        kb.button(text=ch.title, callback_data=f"channel_{ch.id}")
    await callback.message.edit_text("üì¢ –í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª:", reply_markup=kb.as_markup())


# === –í—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ===
@dp.callback_query(F.data.startswith("channel_"))
async def select_amount(callback: types.CallbackQuery):
    channel_id = int(callback.data.split("_")[1])
    kb = InlineKeyboardBuilder()
    for n in [100, 500, 1000]:
        kb.button(text=f"–£–¥–∞–ª–∏—Ç—å {n}", callback_data=f"clean_{channel_id}_{n}")
    kb.button(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª:\n<b>{(await bot.get_chat(channel_id)).title}</b>\n\n–°–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É–¥–∞–ª–∏—Ç—å?",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )


# === –û—Ç–º–µ–Ω–∞ ===
@dp.callback_query(F.data == "cancel")
async def cancel(callback: types.CallbackQuery):
    await callback.message.edit_text("‚ùé –û—Ç–º–µ–Ω–µ–Ω–æ.")


# === –û—á–∏—Å—Ç–∫–∞ ===
@dp.callback_query(F.data.startswith("clean_"))
async def clean(callback: types.CallbackQuery):
    _, channel_id, number = callback.data.split("_")
    channel_id = int(channel_id)
    number = int(number)

    await callback.message.edit_text(f"üßπ –ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ {number} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞...")

    count = 0
    try:
        async for member in bot.get_chat_administrators(channel_id):
            pass
    except Exception:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —è –Ω–µ –∞–¥–º–∏–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")
        return

    async for member in bot.get_chat_members(channel_id):
        if member.status in ("left", "kicked"):
            continue
        try:
            await bot.ban_chat_member(channel_id, member.user.id)
            await bot.unban_chat_member(channel_id, member.user.id)
            count += 1
            if count >= number:
                break
        except Exception:
            continue

    await callback.message.edit_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")


async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
