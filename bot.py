import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder

TOKEN = "–¢–û–ö–ï–ù_–ë–û–¢–ê"  # üîπ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = Bot(token=TOKEN)
dp = Dispatcher()


# === /start ===
@dp.message(F.text == "/start")
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ:\n\n"
        "1Ô∏è‚É£ –î–æ–±–∞–≤—å –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º –≤ –∫–∞–Ω–∞–ª (—Å –ø—Ä–∞–≤–æ–º —É–¥–∞–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)\n"
        "2Ô∏è‚É£ –ü—Ä–∏—à–ª–∏ —Å—é–¥–∞ ID –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @mychannel)\n\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø–æ–∫–∞–∂—É –º–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏."
    )


# === –ü—Ä–∏–Ω–∏–º–∞–µ–º ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞ ===
@dp.message(F.text.startswith("@") | F.text.isdigit())
async def get_channel(message: types.Message):
    channel_id = message.text.strip()
    try:
        chat = await bot.get_chat(channel_id)
        member = await bot.get_chat_member(chat.id, bot.id)
        if member.status not in ("administrator", "creator"):
            await message.answer("‚ùå –Ø –Ω–µ –∞–¥–º–∏–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ. –î–æ–±–∞–≤—å –º–µ–Ω—è —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É.\n{e}")
        return

    kb = InlineKeyboardBuilder()
    for n in [100, 500, 1000]:
        kb.button(text=f"–£–¥–∞–ª–∏—Ç—å {n}", callback_data=f"clean_{chat.id}_{n}")
    await message.answer(
        f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: <b>{chat.title}</b>\n–í—ã–±–µ—Ä–∏, —Å–∫–æ–ª—å–∫–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —É–¥–∞–ª–∏—Ç—å:",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )


# === –û—á–∏—Å—Ç–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ ===
@dp.callback_query(F.data.startswith("clean_"))
async def clean(callback: types.CallbackQuery):
    _, channel_id, number = callback.data.split("_")
    channel_id = int(channel_id)
    number = int(number)
    count = 0

    await callback.message.edit_text(f"üßπ –ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ {number} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...")

    try:
        async for member in bot.get_chat_members(channel_id):
            if member.status in ("left", "kicked"):
                continue
            try:
                await bot.ban_chat_member(channel_id, member.user.id)
                await bot.unban_chat_member(channel_id, member.user.id)
                count += 1
                if count >= number:
                    break
            except Exception:
                continue
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:\n{e}")
        return

    await callback.message.edit_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")


async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
